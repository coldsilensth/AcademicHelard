insert into users (username, email, role, password)
values ('Argen', 'argen@mail.com', 'ROLE_REVIEWER', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Felix', 'felix@mail.com', 'ROLE_MENTOR', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Arsen', 'arsen@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Azamat', 'azamat@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Dasha', 'dasha@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Khashem', 'khashem@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Adelina', 'adelina@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Askat', 'askat@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Ruslan', 'ruslan@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Atai', 'atai@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Aidai', 'aidai@mail.com', 'ROLE_STUDENT', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Gulkaiyr', 'gulkaiyr@mail.com', 'ROLE_STUDENT',
        '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW'),
       ('Admin', 'admin@mail.com', 'ROLE_ADMIN', '$2a$12$62b7EaTtXxFdd.hfahblo.Nt7/yimuGz1euxhDIu4dqe0tsbWIJNW');

insert into categories (name)
values ('Научпоп'),
       ('Искуственный интеллект'),
       ('Дизайн'),
       ('IT-Компании'),
       ('Программирование'),
       ('Мобильная разработка'),
       ('Проектирование баз данных'),
       ('Старая техника'),
       ('Веб-разработка'),
       ('Кибербезопасность'),
       ('Облачные технологии'),
       ('Робототехника'),
       ('Open Source');

insert into tag (name)
values ('#облачныетехнологии'),
       ('#IaaS '),
       ('#PaaS'),
       ('#облако'),
       ('#криптография'),
       ('#алгоритмы'),
       ('#бэкенд'),
       ('#вебдизайн'),
       ('#безопасностьданных'),
       ('#криптография'),
       ('#юиксдизайн'),
       ('#джава'),
       ('#спринг'),
       ('#мобильнаяразработка'),
       ('#айос'),
       ('#андроид'),
       ('#научнаятеория'),
       ('#апи'),
       ('#фаанг'),
       ('#базаданных');
insert into publications(date_of_creation, pass, rdt, title, subtitle, text, type, author, category, preview)
values (now(), true, null,
        'Современные паттерны навигации в iOS-приложениях',
        'Жизнь на Земле обязана своим существованием фотосинтезу — процессу, появившемуся 2,3 миллиарда лет назад. Эта чрезвычайно интересная (и до сих пор не до конца понятная) реакция позволяет растениям и другим организмам получать солнечный свет, воду и углекислый газ, преобразуя их в кислород и энергию в виде сахара.',
        'По данным 42Matters, каждый месяц в Apple App Store появляется более 30 000 новых приложений. В условиях жесткой конкуренции требования к новым проектам постоянно растут. Чтобы стать популярным, приложению нужно быть полезным, удобным, интуитивно понятным, логичным и просто красивым. Многие из этих качеств зависят от правильно построенной навигации и применения узнаваемых дизайнерских паттернов.
 Как настроить навигацию в iOS-приложении так, чтобы пользователю было легко взаимодействовать с интерфейсом? Чтобы помочь UI/UX-дизайнерам и рассказать о самых популярных паттернах навигации для iOS приложений, мы перевели статью от дизайнера интерфейсов Фрэнка Рауша. Фрэнк — преподаватель, эксперт по юзабилити и консультант по дизайну в международных компаниях. В своем блоге он рассказывает, что такое пирамидальная, пошаговая и плоская навигация, а мы делимся этой информацией с русскоязычными дизайнерами.
 Какие существуют навигационные шаблоны для iOS-приложений
 Есть несколько дизайнерских паттернов (или шаблонов), которые используются для приложений разных направлений — e-commerce, финтех, соцсети, мессенджеры и т.д. Чтобы понять, какие шаблоны подойдут для приложения, нужно построить пользовательский путь и посмотреть на примеры успешных проектов конкурентов. Правильный выбор паттернов важен: если приложение интернет-магазина будет работать как, например, дейтинговый сервис с пролистыванием анкет или фотографий, покупатели могут запутаться, отказаться от покупки и удалить приложение со смартфона. Разбираем, какие шаблоны навигаций бывают.
 Структурная навигация
 Приложения iOS имеют фиксированную архитектуру — чаще всего это иерархическое дерево с несколькими уровнями вложенности. Такая структура делает варианты навигации предсказуемыми. Пользователи легко поймут, на каком экране они оказались и как вернуться на главную страницу. Есть несколько видов структурной навигации.
 Древовидная структура
 Навигация построена по структуре «дерева» в виде списка или плитки карточек — экран следует за экраном. Чтобы визуализировать переход между экранами обычно добавляют анимацию в виде горизонтального наплыва одного экрана на другой.
 Особенности структуры:
 На верхней панели навигации всегда отображается заголовок текущего экрана.
 Индикатор (>) в списке показывает пользователю, что можно перейти на следующий уровень иерархии.
 Кнопка «Назад» (<) показывает путь на предыдущий экран.
 Чтобы вернуться к главной странице, нужно пройти обратно все посещенные экраны.
 Плоская структура
 Этот шаблон предназначен для навигации между корневыми экранами приложения. Пользователь может переключаться с экрана на экран с помощью панели вкладок в нижней части экрана iPhone или на боковой части iPad. На этой панели размещены ключевые разделы, которые показывают, что может делать приложение.
 Особенности структуры:
 Один из элементов панели вкладок всегда выбран.
 Нельзя разместить больше 5 иконок экранов.
 Панель вкладок всегда доступна пользователю. Исключение — действия, когда панель перекрывается модальным окном.
 Пирамидальная структура
 Шаблон «пирамиды» позволяет быстро перемещаться между элементами на одном уровне иерархии, не возвращаясь к родительскому экрану. Такую навигацию можно встретить в приложениях медиа-галереях.

 Особенности структуры:

 Навигация на одном уровне.

 Свайп для перехода к следующему элементу.

 Рекомендуется использовать индикатор навигации в виде точек пагинации, чтобы показать пользователю общее количество элементов.


 Модальная навигация
 Модальные окна — это элементы, которые должны привлечь внимание пользователя. Примеры модальных окон — подсказки, поп-апы и другие всплывающие панели. Они могут появляться в любом контексте, даже поверх других окон.

 Высокоприоритетные окна
 Высокоприоритетные окна — это диалоговые или выезжающие панели, которые блокируют то, что находится за ними. Их цель — побудить пользователя к какому-то действию, заставить принять решение. Например, модальное окно нужно, чтобы пользователь выбрал способ сортировки в каталоге или добавил событие в календарь.


 Низкоприоритетные окна
 Подсказки, поп-апы, всплывающие меню и другие элементы блокируют «‎задний план», но не требуют от пользователя принятия решения. Их можно закрыть или смахнуть, и они исчезнут без особых усилий.


 Подсказки
 Подсказки — не совсем модальная навигация, но входит в эту категорию. Хоть они и перекрывают часть экрана, но не блокируют интерфейс позади. Они могут появляться, например, как уведомления от операционной системы. Часто в немодальные окна добавляют интерактивные элементы. Самый популярный пример такого окна — индикатор увеличения и уменьшения громкости.


 Внутренняя навигация
 Внутренние шаблоны навигации нужны, чтобы удержать внимание пользователя на одном экране. Мы поговорим о самых распространенных их видах.

 Изменение состояния
 Этот паттерн применяется для изменения состояния экрана, например, во время прогрузки страницы и отправки запроса на сервер. При этом пользователь остается на одной и той же позиции в иерархии.


 Пошаговая навигация
 Пошаговая навигация объединяет ряд экранов в линейный флоу. Этот паттерн дизайнеры часто добавляют для онбординга пользователя или для оформления заказа в e-com-приложениях. Переход назад или вперед не меняет уровень иерархии экранов.

 Пошаговая навигация размещается в модальном окне, поэтому кнопка «Назад» служит для другой цели, чем в иерархическом паттерне навигации. Процесс обычно завершается кнопкой «Готово» или «Закрыть».


 Итог
 Описанные паттерны постоянно применяются в дизайне мобильных приложений на iOS. И в этом нет ничего плохого — в данном случае привычность и предсказуемость более важна, чем оригинальность. Пользователи привыкли ориентироваться в приложениях определенными способами. Дизайнеры могут совершенствовать эти способы, чтобы сделать приложение еще удобнее.

 Пользуйтесь этой статьей как шпаргалкой — это поможет оставаться в тренде и создавать привлекательные интерфейсы для приложений, которые обязательно найдут своего пользователя. ',
        'ARTICLE', 9, 3,
        'https://habrastorage.org/r/w1560/getpro/habr/upload_files/359/acb/50f/359acb50f02d9db6578b8446647f0c8c.png'),

       (now(), true, null,
        'Аутентификация REST API с помощью Spring Security и MongoDB',
        'API предоставляют простой интерфейс для взаимодействия с внутренними данными, поэтому имеет смысл, чтобы вы не хотели, чтобы кто попало имел доступ к этим данным и их изменению. Аутентификация гарантирует, что только заслуживающие доверия пользователи смогут получить доступ к API.',
        'Вступление

 В предыдущем посте мы рассмотрели, как создать REST API с использованием инфраструктуры Java Spring Boot и MongoDB. API, однако, не требовал никакой аутентификации, а это значит, что он, вероятно, все еще не готов к использованию. Поэтому в этом руководстве будет рассказано, как использовать встроенную среду безопасности Spring для добавления уровня аутентификации в этот API.

 Почему нашему API нужна аутентификация?

 API предоставляют простой интерфейс для взаимодействия с внутренними данными, поэтому имеет смысл, чтобы вы не хотели, чтобы кто попало имел доступ к этим данным и их изменению. Аутентификация гарантирует, что только заслуживающие доверия пользователи смогут получить доступ к API.

 Как это работает

 Мы будем использовать базовую HTTP аутентификацию, которая использует имя пользователя и пароль. Имя пользователя и пароль разделяются в одной строке двоеточием в следующем формате username:password.

 Эта строка затем кодируется с использованием кодировки Base64, поэтому строка admin:p@55w0Rd будет закодирована в следующую строку YWRtaW46cEA1NXcwUmQ= (хотя я бы предложил использовать более надежный пароль, нежели “p@55w0Rd”). Мы можем прикрепить эту аутентификацию к нашим запросам, добавив заголовок Authentication. Этот заголовок для предыдущего примера будет выглядеть следующим образом (где «Basic» означает, что пароль использует базовую HTTP аутентификацию):

 Authentication: Basic YWRtaW46cEA1NXcwUmQ=

 Как Spring управляет безопасностью

 Spring предлагает надстройку под названием Spring Security, которая делает аутентификацию легко настраиваемой и чрезвычайно простой. Мы даже можем использовать некоторые навыки, которые мы узнали в предыдущем посте, при настройке!

 Что нам нужно

 Новая коллекция в нашем экземпляре MongoDB под названием «users»
 Новый документ в коллекции «users» со следующими полями (любые другие поля являются необязательными, но эти необходимы): username, password (хешируется с помощью алгоритма BCrypt, об этом чуть позже)
 Исходники из предыдущего поста

 BCrypt для хеширования паролей

 Хеширование — это односторонний алгоритм шифрования. По сути, после хеширования практически невозможно обнаружить, как выглядели исходные данные. Алгоритм хэширования BCrypt сначала солит фрагмент текста, а затем хеширует его до строки длиной 60 символов. Кодировщик Java BCrypt предлагает метод matches, который проверяет, соответствует ли строка хешу. Например, пароль p@55w0Rd, хешированный с помощью BCrypt, может иметь значение $2b$10$Qrc6rGzIGaHpbgPM5kVXdeNZ9NiyRWC69Wk/17mttHKnDR2lW49KS. При вызове метода matches BCrypt для незашифрованного и хешированного пароля мы получим значение true. Эти хеши могут быть сгенерированы с помощью встроенного в Spring Security кодировщика BCrypt.

 Почему мы должны хешировать пароли?

 Мы все слышали о недавних кибератаках, в результате которых у крупных компаний были украдены пароли. Так почему же рекомендуется только менять наши пароли после взлома? Потому что эти крупные компании позаботились о том, чтобы пароли всегда хешировались в их базах данных!

 Хотя все-равно всегда стоит менять пароли после подобных взломов данных, хеширование паролей чрезвычайно затрудняет поиск реального пароля пользователя, поскольку оно является односторонним алгоритмом. Фактически, могут потребоваться годы, чтобы взломать сложный пароль хешированный должным образом. Это дает дополнительный уровень защиты от кражи паролей. А Spring Security упрощает хеширование, поэтому реальный вопрос должен звучать так: «Почему бы и нет?»

 Добавление пользователя в MongoDB

 Я добавлю минимум полей, необходимых для моей коллекции users (пользователи), поэтому документ с пользователями в моей базе данных будет содержать только username (имя пользователя) и хешированный BCrypt password (пароль). В этом примере моим именем пользователя будет admin, а моим паролем будет welcome1, но я бы предложил использовать более надежные имя пользователя и пароль в API производственного уровня.

 db.users.insert({
  “username” : “admin”,
  “password” : “$2a$10$AjHGc4x3Nez/p4ZpvFDWeO6FGxee/cVqj5KHHnHfuLnIOzC5ag4fm”
 });

 Это все настройки, необходимые в MongoDB! Остальная конфигурация будет выполнена в нашем Java-коде.

 Добавление модели пользователей и репозитория

 В предыдущем посте подробно рассказывалось о моделях и репозиториях Mongo, поэтому я не буду здесь вдаваться в подробности о том, как они работают — если вы хотите освежить знания, не стесняйтесь посетить мой предыдущий пост!

 Недостатком является то, что Spring должен знать, как будет выглядеть документ user (модель) и как получить доступ к коллекции user в базе данных (репозитории). Мы можем поместить эти файлы в те же папки моделей и репозиториев соответственно, как мы делали в предыдущем упражнении.

 Модель

 Моделью будет базовый класс Java с пользовательскими _id, username и password. Файл будет называться Users.java. и будет выглядеть следующим образом:

 package com.example.gtommee.rest_tutorial.models;

 import org.bson.types.ObjectId;
 import org.springframework.data.annotation.Id;

 public class Users {
  @Id
  public ObjectId _id;

  public String username;
  public String password;

  public Users() {}

  public Users(ObjectId _id, String username, String password)
 {
    this._id = _id;
    this.username = username;
    this.password = password;
  }

  public void set_id(ObjectId _id) { this._id = _id; }

  public String get_id() { return this._id.toHexString(); }

  public void setPassword(String password) { this.password = password; }

  public String getPassword() { return password; }

  public void setUsername(String username) { this.username = username; }

  public String getUsername() { return username; }
 }

 Репозиторий

 Репозиторий будет называться UsersRepository.java и будет выглядеть следующим образом — помните, нам нужно будет найти пользователей по их username, поэтому нам нужно будет включить метод findByUsername в интерфейс репозитория.

 package com.example.gtommee.rest_tutorial.repositories;

 import com.example.gtommee.rest_tutorial.models.Users;
 import org.springframework.data.mongodb.repository.MongoRepository;

 public interface UsersRepository extends MongoRepository<Users, String> {
  Users findByUsername(String username);
 }

 И на этом все для модели и репозитория!

 Добавление зависимостей безопасности

 В корневом каталоге проекта должен быть файл с именем pom.xml. Мы еще не трогали этот файл, но файл pom содержит все зависимости нашего проекта, и мы собираемся добавить туда парочку, поэтому давайте начнем с открытия этого файла и прокрутки вниз до тега <dependencies>.

 Единственная новая зависимость, в которой мы нуждаемся, — это spring-starter-security. Spring имеет встроенный менеджер версий, поэтому зависимость, которую мы должны добавить в тег <dependencies>, следующая:

 <dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-security</artifactId>
 </dependency>

 И Maven загрузит исходные файлы за нас, так что наши зависимости должны быть готовыми к работе!

 Создание службы аутентификации

 Нам нужно сообщить Spring, где находятся наши пользовательские данные и где найти информацию, необходимую для аутентификации. Для этого мы можем создать службу аутентификации (Authentication Service). Давайте начнем с создания новой папки в src/main/resources/java/[package name] под названием services, и мы можем создать новый файл в этой папке конфигурации с именем MongoUserDetailsService.java.

 MongoUserDetailsService.java

 Этот класс имеет один основной компонент, поэтому я просто приведу здесь весь класс, а затем объясню его ниже:

 package com.example.gtommee.rest_tutorial.services;

 import com.example.gtommee.rest_tutorial.models.Users;
 import com.example.gtommee.rest_tutorial.repositories.UsersRepository;

 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
 import org.springframework.security.core.userdetails.User;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 import org.springframework.stereotype.Component;

 import java.util.Arrays;
 import java.util.List;

 @Component
 public class MongoUserDetailsService implements UserDetailsService{
  @Autowired
  private UsersRepository repository;

  @Override
  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
    Users user = repository.findByUsername(username);

    if(user == null) {
      throw new UsernameNotFoundException(“User not found”);
    }

    List<SimpleGrantedAuthority> authorities = Arrays.asList(new SimpleGrantedAuthority(“user”));

    return new User(user.getUsername(), user.getPassword(), authorities);
  }
 }

 Этот сниппет начинается с импортов, которые нам понадобятся в файле. Далее, раздел implements UserDetailsService обозначает, что этот класс будет создавать сервис для поиска и аутентификации пользователей. Затем, аннотация @Component указывает, что этот класс можно внедрить в другой файл (например, файл SecurityConfiguration, к которому мы перейдем через несколько разделов).

 Аннотация @Autowired над private UsersRepository repository; является примером внедрения, это свойство предоставляет нам экземпляр нашего UsersRepository для работы. Аннотация @Override обозначает, что этот метод будет использоваться вместо метода по умолчанию UserDetailsService. Сначала этот метод получает объект Users из источника данных MongoDB с помощью метода findByUsername, который мы объявили в UsersRepository.

 Затем метод проверяет, был ли пользователь найден или нет. Затем пользователю предоставляются полномочия/роль (это может добавить дополнительные уровни аутентификации для уровней доступа, но для этого урока будет достаточно одной роли). Наконец, метод возвращает объект Spring User с username, password и role аутентифицированного пользователя.

 Создание конфигурации безопасности

 Нам потребуется переопределить некоторые встроенные протоколы безопасности Spring для использования нашей базы данных и алгоритма хеширования, поэтому нам потребуется специальный файл конфигурации. Чтобы создать его, мы должны создать новую папку в src/main/resources/java/[package name] с именем config, и мы также должны создать новый файл в этой папке конфигурации с именем SecurityConfiguration.java. Этот файл имеет несколько важных частей, поэтому давайте начнем с базового класса SecurityConfiguration:

 SecurityConfiguration.java

 package com.example.gtommee.rest_tutorial.config;

 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

 @Configuration
 @EnableConfigurationProperties
 public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
 @Autowired
 MongoUserDetailsService userDetailsService;
 }

 Здесь уже хватает того, с чем нужно разбираться, так что давайте начнем сверху. Аннотация @Configuration указывает, что класс будет содержать Java-бины, подробно описанные здесь. Аннотация @EnableConfigurationProperties указывает, что класс будет содержать в качестве особого конфигурационного бина. Затем инструкция extends WebSecurityConfigurerAdapter сопоставит нашему классу конфигурации родительский класс WebSecurityConfigurerAdapter, предоставив нашему классу все необходимое для обеспечения соблюдения его правил безопасности. Наконец, класс автоматически внедрит экземпляр (@Autowired) MongoUserDetailsService, который мы можем использовать позже в этом файле.

 Этап аутентификации

 Далее нам нужно сообщить Spring Security, как мы хотим обрабатывать аутентификацию пользователей. По умолчанию Spring Security имеет предопределенные имя пользователя и пароль, CSRF Protection и управление сеансами. Однако мы хотим, чтобы наши пользователи использовали свое имя пользователя и пароль для доступа к базе данных. Кроме того, поскольку наши пользователи будут проходить повторную аутентификацию при каждом запросе, а не входить в систему, CSRF Protection и управление сеансами нам не нужны, поэтому мы можем добавить метод с именем configure, который переопределяет схему аутентификации по умолчанию, чтобы сообщить Spring, как именно мы хотим обрабатывать аутентификацию, и будет выглядеть следующим образом:

 @Override
 protected void configure(HttpSecurity http) throws Exception {
 http
   .csrf().disable()
   .authorizeRequests().anyRequest().authenticated()
   .and().httpBasic()
   .and().sessionManagement().disable();
 }

 Опять же, здесь происходит довольно много всего, поэтому мы будем разбираться поэтапно. Аннотация @Override указывает Spring Boot использовать метод configure (HttpSecurity http) вместо конфигурации Spring по умолчанию. Затем мы вызываем серию методов для объекта http, где происходит фактическая конфигурация. Эти методы делают следующее:

 csrf().disable(): Отключает CSRF Protection, поскольку она не нужна для API
 authorizeRequests().anyRequest().authenticated(): Декларирует, что все запросы к любой конечной точке должны быть авторизованы, иначе они должны быть отклонены.
 and().httpBasic(): сообщает Spring, чтобы он ожидал базовую HTTP аутентификацию (обсуждалось выше).
 .and().sessionManagement().disable(): сообщает Spring, что не следует хранить информацию о сеансе для пользователей, поскольку это не нужно для API

 Добавление кодировщика Bcrypt

 Теперь нам нужно сказать Spring, чтобы он использовал кодировщик BCrypt для хеширования и сравнения паролей — это звучит как трудная задача, но на самом деле это очень просто. Мы можем добавить этот кодировщик, просто добавив следующие строки в наш класс SecurityConfiguration:

 @Bean
 public PasswordEncoder passwordEncoder() {
   return new BCryptPasswordEncoder();
 }

 И все дела! Этот простой бин сообщает Spring, что PasswordEncoder, который мы хотим использовать, — это Spring Boot BCryptPasswordEncoder() для кодирования и сравнения хешей паролей. Spring Boot также включает несколько других кодировщиков паролей — рекомендую попробовать их, если вы хотите поэкспериментировать!

 Указание диспетчера аутентификации

 Наконец, мы должны указать в нашей SecurityConfiguration, что мы хотим использовать MongoUserDetailsService (который мы создали в предыдущем разделе) для нашей аутентификации. Мы можем сделать это с помощью следующего метода:

 @Override
 public void configure(AuthenticationManagerBuilder builder)
 throws Exception {
  builder.userDetailsService(userDetailsService);
 }

 Этот метод просто переопределяет конфигурацию по умолчанию AuthenticationManagerBuilder, заменяя вместо этого нашу собственную службу автоматической передачи пользовательских данных.

 Окончательный файл SecurityConfiguration.java

 import com.example.gtommee.rest_tutorial.services.MongoUserDetailsService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;

 @Configuration
 @EnableConfigurationProperties
 public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
 @Autowired
 MongoUserDetailsService userDetailsService;

 @Override
 protected void configure(HttpSecurity http) throws Exception {
   http
     .csrf().disable()
     .authorizeRequests().anyRequest().authenticated()
     .and().httpBasic()
     .and().sessionManagement().disable();
 }

 @Bean
 public PasswordEncoder passwordEncoder() {
   return new BCryptPasswordEncoder();
 }

 @Override
 public void configure(AuthenticationManagerBuilder builder)
 throws Exception {
   builder.userDetailsService(userDetailsService);
 }
 }

 Проверка аутентификации

 Я протестирую быстрый GET-запрос с правильной и неправильной аутентификацией, чтобы убедиться, что конфигурация работает в соответствии с планом.

 Неправильные Имя пользователя/Пароль

 URL: http://localhost:8080/pets/
 Метод: GET
 Авторизация: Basic YWRtaW46d2VsY29tZQ==

 Ответ:

 401 Unauthorized

 Правильные Имя пользователя/Пароль

 URL: http://localhost:8080/pets/
 Метод: GET
 Авторизация: Basic YWRtaW46d2VsY29tZTE=

 Ответ:

 [
 {
   “_id”: “5aeccb0a18365ba07414356c”,
   “name”: “Spot”,
   “species”: “dog”,
   “breed”: “pitbull”
 },
 {
   “_id”: “5aeccb0a18365ba07414356d”,
   “name”: “Daisy”,
   “species”: “cat”,
   “breed”: “calico”
 },
 {
   “_id”: “5aeccb0a18365ba07414356e”,
   “name”: “Bella”,
   “species”: “dog”,
   “breed”: “australian shepard”
 }
 ]

 Вывод

 Работает как надо! Базовая аутентификация HTTP для API Spring Boot может быть сложной, но, надеюсь, это руководство поможет сделать ее более понятной. Аутентификация является необходимостью в современном кибер-климате, поэтому такие инструменты, как Spring Security, имеют решающее значение для обеспечения целостности и безопасности ваших данных.',
        'ARTICLE', 2, 5, 'https://cdn.hashnode.com/res/hashnode/image/upload/v1597113579457/ZEwtfFWJ5.png'),

       (now(), true, null,
        'Рассказываем, как мобильные приложения помогают бизнесу',
        'Разработка приложения на аутсорсе — это история про доверие. Вы отдаёте свой проект другой команде, когда он ещё находится на стадии идеи. Команда выращивает из этой идеи крутой сервис, который будет помогать вашим пользователям.',
        'Мобильные приложения очень-очень отличаются друг от друга. В каком-то может быть одна кнопка, в другом — целая система по управлению предприятием. Поэтому стоимость разработки каждого приложения разная.

 В основном стоимость зависит от количества часов, которые нужны разработчикам для внедрения функций. Но это не всё. Что ещё — сейчас разберём.

 Если вы уже готовы к разработке мобильного приложения и хотите прямо сейчас узнать, сколько будет стоить ваш проект — напишите нам для индивидуальной оценки.

 Из чего складывается стоимость создания мобильного приложения

 Сценарий №1. Вы разрабатываете приложение аутсорс-командой
 Разработка приложения на аутсорсе — это история про доверие. Вы отдаёте свой проект другой команде, когда он ещё находится на стадии идеи. Команда выращивает из этой идеи крутой сервис, который будет помогать вашим пользователям.

 Стоимость разработки приложения на аутсорсе состоит из трёх слагаемых: цена работы производства, сопутствующие расходы и стоимость поддержки после релиза. Рассмотрим каждое из них.


 1. Стоимость работы производства

 Производство — та часть команды, которая делает приложение руками: проектирует, создаёт дизайн, пишет и тестирует код. Всем этим занимаются разные специалисты.

 Чтобы сделать свою работу, им нужно некоторое количество часов. Это количество они определяют сами, исходя из сложности проекта, своего опыта и насмотренности. Количество часов умножается на стоимость часа — так получается стоимость работы производства.


 Стоимость часа специалистов в разных студиях разработки разная. На ставку может влиять всё: место компании в рейтинге разработчиков, город, в котором расположена компания, стоимость аренды помещения, опыт специалистов. Но в среднем по рынку ставки такие:


 По данным портала SkillStaff за первый квартал 2023 года
 2. Сопутствующие работы — всё, что накладывается сверху

 Работа производства — это не всё, что требуется проекту, чтобы начать жить. Вокруг производства есть ещё несколько пунктов расходов, на которые тоже нужно закладывать бюджет.

 Исследования. Приложения создаются, чтобы решать задачи людей. Понять, что это за задачи и как приложения могут их решить, помогают исследования целевой аудитории и конкурентов. К разработчикам можно прийти как с готовыми исследованиями, так и провести исследования вместе с ними.

 Детализация требований. От этапа к этапу требования к приложению могут меняться. У клиента появляется новая идея — разработчики её воплощают. Или во время разработки разработчики понимают, что что-то работает не так, как запланировали — тогда требования уточняются, и это тоже влияет на стоимость проекта.

 Менеджмент. Чтобы на проекте всё шло гладко: задачи понимались верно, сроки не горели, — нужен человек, который будет за всем этим следить и помогать команде делать дело. Этот человек — менеджер. Его работа тоже оплачивается по количеству часов, которое он затрачивает, работая на проекте.

 3. Поддержка — всё, что после разработки

 Для успешного существования приложения ему необходима постоянная поддержка. Поддержка включает обновления, обслуживание серверной части, услуги облачного хостинга, а также доработки по обратной связи от пользователей и развитие функциональности сервиса.

 У многих компаний в общую стоимость приложения включается только гарантийная поддержка. Технические доработки и дальнейшее развитие проекта — новая глава в его жизни. На эти работы заключается новый договор, а их стоимость оценивается отдельно.

 Сценарий №2. Вы нанимаете фрилансеров или формируете инхаусу-команду
 1. Сколько будет стоить разработка проекта на фрилансе

 Если разработкой приложения будет заниматься команда фрилансеров, то его стоимость будет зависеть от сложности, объема работы на проекте и ставок специалистов. А ставки специалисты выставляют сами — в зависимости от того, как давно, как хорошо и в какой стране они работают.

 В среднем, стоимость разработки мобильного приложения фрилансерами может быть ₽750 000–₽3 750 000 и больше. Эти цифры не являются стандартными и могут меняться в зависимости от требований проекта и квалификации разработчика.

 2. Сколько будет стоить разработка проекта инхаус-командой

 Формирование инхаус-команды с нуля обойдётся дороже найма фрилансеров и дороже аутсорс-разработки. Однако у этого подхода свои преимущества: более высокая скорость и контроль в планировании проекта с самого начала до конца.

 Стоимость разработки мобильного приложения инхаус-командой может начинаться от миллиона рублей и доходить до бесконечности. Она будет включать в себя затраты на инфраструктуру, оборудование, программное обеспечение, зарплаты и дополнительные выплаты сотрудникам, которых вы взяли в штат. Посмотрите, сколько вы потратите на одни только зарплаты в месяц:


 От 730 000 до 1 055 000 рублей минимум будет уходить у вас только на зарплату команде каждый месяц — по данным «Хабр.Карьеры» за первое полугодие 2022
 Кого выбрать для разработки приложения, чтобы сэкономить бюджет
 Кажется, что проект, созданный фрилансерами, выйдет дешевле. Но отсутствие взаимосвязи между отдельными специалистами будет мешать и растягивать коммуникацию — проект будет дорожать. Скорректировать это можно, наняв менеджера-фрилансера. Или самому заняться управлением проекта. Но по нагрузке — это как управлять вторым бизнесом.

 Инхаус-команды и аутсорс-разработчики делают сложные проекты дороже, но лучше. И это лучше у них одинаковое — всё потому, что у них есть опыт, налаженная коммуникация и погружённость в проектные задачи. Посмотрите на проекты ниже — уверены, вам было бы сложно догадаться, кто за ними стоит.


 Скрытые расходы на разработку приложения
 Независимо от того, кому вы доверите разработку приложения, вам нужно будет заложить бюджет на поддержку сторонних сервисов, юридическое сопровождение приложения и маркетинг вашего проекта.

 Поддержка интеграций. За сервисы, которые интегрируются с приложением, нужно платить. Это и смс-уведомления, и почтовая рассылка, и вообще любой вспомогательный инструмент, который нужен приложению для работы.

 Для примера — сейчас мы разрабатываем приложение, в котором нужно собирать коллажи. Чтобы для коллажа можно было использовать любую картинку, мы подключили к приложению сервис для обрезки фонов — за него клиент будет регулярно платить

 Правовые вопросы. Приложение может потребовать соблюдения определенных правил и законов, которые могут стать причиной дополнительных затрат на юридические услуги.

 Маркетинг и продвижение приложения. Выпуск приложения на рынок требует затрат на маркетинг, включая продвижение, рекламу и промо-акции. Эти затраты нельзя игнорировать, потому что именно маркетинг поможет большему количеству людей узнать о вашем проекте.

 Пример того, что маркетинг важен, — кейс Airbnb. Когда сервис только запускался, маркетологи бренда провели кампанию по увеличению осведомленности о приложении, используя социальные медиа и платформы мобильной рекламы (Facebook и Google AdWords), персонализированные email-рассылки, пуши для привлечения внимания пользователей.

 В результате приложение принесло компании много новых клиентов и прибыли. В 2018 году приложение получило порядка 500 миллионов загрузок и оценивалось в 31 миллиард долларов. Сейчас Airbnb самый популярный сервис по аренде отпускного жилья.


 Стоимость разработки приложения в зависимости от целей вашего бизнеса

 1. Протестировать гипотезу
 Стоимость: до 1 000 000 ₽

 Приложения до миллиона рублей создают, чтобы протестировать идею и понять, «заходит» ли продукт пользователям. Для разработки используют конструкторы. Продукты «из коробки» быстро запускаются, неплохо выглядят, но их возможности ограничены тем, что предлагает конструктор. Функционально — это «витрины», и у них не хватает потенциала, чтобы продвигать продукт или услугу.

 2. Выйти на рынок

 Стоимость: 1 000 000-2 000 000 ₽

 За эти деньги можно создать как MVP-версию, так и полноценный диджитал-продукт. Если бизнес хочет зарабатывать с помощью мобильного приложения, обслуживать большое количество клиентов или нуждается в приложении для корпоративного использования, но при этом планирует развиваться поэтапно, ему подойдёт это решение.

 3. Масштабировать бизнес
 Стоимость:  от 4 000 000 ₽

 Приложения, чья цена перешагивает отметку в 4 миллиона рублей  — это крупные проекты с большим количеством интеграций. Иногда супераппы, например такие, как Яндекс или Тинькофф-Банк, в котором можно не только перевести деньги бабушке, но и купить билеты на самолёт.

 Факторы, влияющие на стоимость разработки мобильного приложения

 1. Количество платформ
 Когда-то принято было считать, что есть бизнес, который нужно развивать на iOS-приложениях, а есть — на Android. Люди даже выбирали, какая платформа больше им подходит. Но всё это — мифы, которые индустрия давно развенчала (и мы тоже).

 Правда в том, что бизнесу выгоднее разрабатывать приложение на обе платформы. Так приложение покроет большее количество пользователей, и больше людей будут использовать его каждый день.


 Если вы разрабатываете приложение только для одной платформы, то отказываетесь от огромной части аудитории
 Конечно, разработать приложение на две платформы дороже, чем на одну. Но это более выгодно в перспективе. Ведь на создание приложений уходит не только время разработчиков — это работа дизайнеров, менеджеров, аналитиков и тестировщиков.

 Если вы создаёте приложение сначала под iOS, а потом под Android, то все этапы придётся проходить сначала — по стоимости это как разработать два приложения. Если начинать разработку приложений под iOS и Android одновременно, то будет ×1,5 затрат, чем разрабатывать приложение только на одну платформу. А это дешевле, чем ×2 к стоимости, если разрабатывать приложение на разные платформы поочерёдно.

 2. Функциональность
 Функциональность — это основные возможности приложения. То есть то, что приложение делает и как оно это делает. Зависимость прямая: чем больше функций и чем они сложнее, тем дороже будет стоить проект. Допустим, есть две компании, которые хотят создать мобильное приложение для онлайн-магазина.


 У второго приложения функциональность шире, чем у первого. Следовательно, его разработка будет занимать больше времени и ресурсов — это повысит цену проекта.

 Совсем не значит, что приложение с меньшей функциональностью хуже. Если вы понимаете, что небольшого количества функций хватит, чтобы закрыть бизнес-цели вашей компании, то проект нужно разрабатывать уже сейчас. Если вы видите, что простая функциональность не закроет ваши цели, то возможности приложения нужно расширять. Сориентироваться в наборе функций вам помогут разработчики — позвоните +7 495 204-35-03 или напишите нам, чтобы мы проконсультировали вас бесплатно.

 3. Объём кастомизации дизайна
 При разработке дизайна мы ориентируемся на гайдлайны операционных систем iOS и Android — это такие стандарты по оформлению интерфейса. Разработчики используют их, чтобы от приложения к приложению одни и те же действия приводили человека к одному и тому же результату.

 Но от гайдлайнов всё же отходят, чтобы придать проекту индивидуальность, выделиться, или, наоборот, изменить какой-то устоявшийся паттерн — если исследования показали, что конкретным пользователям в конкретном продукте нужно что-то другое, а не то, что требуют гайдлайны.

 В кастомизации может быть и меньше смысловой нагрузки. Иногда дизайн кастомизируют просто, чтобы было красиво.

 Пример — выбор даты в приложении. В iOS для этого в стандартном случае используется барабан, а в Android — карточка. Если вы хотите, чтобы в приложении и на iOS, и на Android выбор даты был одинаковым, то для одной платформы нужно писать код с нуля. Это дольше и дороже, чем стандартное решение.


 С анимациями похожая история: чем они сложнее и круче, тем больше времени и бюджета требуют. Но иногда мы вместе с заказчиком включаем нестандартные решения целенаправленно, как это было на проекте «Наш ребёнок».


 Таких моментов в приложении может быть много. В сумме они повлияют на стоимость проекта, ведь потребуют больше времени дизайнера и разработчика.

 Какие компоненты приложения разработчики будут создавать дольше всего

 1. Бэкенд мобильного приложения
 Разработка «виртуальной части» приложения — той, которая находится на серверах, хранит базы данных и связывает воедино все сервисы, работающие с приложением: CRM, эквайринг, складские и другие системы, необходимые для ведения бизнеса.

 Цена: от 500 000 ₽

 2. Внедрение сложных технологий
 К ним может относиться VR/AR, технологии на базе искусственного интеллекта или интеграция с внешними устройствами. Так для одного из наших проектов мы сделали приложение, которое считывает информацию с умного устройства, находящегося внутри автомобиля, и выводит данные о нём на экран.

 Цена: от 200 000 ₽

 3. Разработка админпанели
 Разработка части, которая позволяет менеджерам на стороне клиента управлять контентом в приложении: менять баннеры на главном экране, оформлять сезонные акции, менять заголовки и добавлять новые изображения.

 Цена: 300 000 – 600 000 ₽

 Как происходит оценка приложения: разбираем на примере

 Первый раз стоимость приложения считается на этапе знакомства клиента и студии. Клиент рассказывает нам, каким он представляет функциональность приложения или показывает бриф. Затем мы проводим интервью, чтобы детализировать требования, и готовый перечень функций отдаём разработчикам на оценку.

 Кейс с оценкой eCommerce-приложения
 Задача: разработать MVP-версию приложения для крупного федерального ретейлера с нуля под iOS и Android.

 Функциональность: каталог товаров, система фильтров, карточка товара, корзина, карта лояльности, экран доставки, возможность оплаты тремя разными способами.

 Сколько это может стоить:


 Можно ли посчитать цену самому
 У вас есть видение проекта, ТЗ на мобильное приложение, вы разобрались, какие специалисты вам нужны и теперь знаете, из чего складывается стоимость приложения. Кажется, что можно посчитать затраты самому. Но оценка мобильного приложения сложнее, чем кажется.

 Когда мы оцениваем приложение, нам нужно оценить стоимость того, чего ещё нет в реальности, — только в задумке. По ходу проекта задумка может меняться — кардинально или немного. Из-за этого будут меняться способы выполнения задач и сроки. К тому же в любой момент могут появиться непредвиденные сложности или ситуация на рынке может измениться (слишком часто это происходит в последнее время).

 Без глубинных знаний, опыта и грамотного прогнозирования невозможно учесть всё. Поэтому, если вы хотите знать, сколько будет стоить ваш проект, не нужно мучить себя расчётами — лучше напишите нам. Мы выслушаем чего вы хотите, подключим наших специалистов для оценки и составим смету на разработку приложения.

 Стоимость приложений в мире в 2023 году

 Состояние рынка — тот фактор, от которого нам не скрыться. Он тоже влияет на стоимость разработки. Вот как сейчас с этим обстоят дела в мире.

 По данным Clutch, в среднем стоимость разработки мобильного приложения в США и Канаде составляет от $100 000 до $500 000. В странах Европы цены такие же высокие и составляют от €80 000 до €300 000.


 В Азии очень разный уровень цен в зависимости от страны. В Индии или Пакистане стоимость мобильного приложения может составлять от $10 000 до $50 000, на Филиппинах и в Индонезии $20 000 - $75 000. В Японии и Южной Корее цены на разработку мобильных приложений также довольно высокие.


 В России цены на разработку мобильных приложений начинаются от $10 000 и могут достигать $150 000 и более.

 ИТ-компании — часть российской экономики, поэтому стоимость мобильного приложения в 2023 году зависит от общего состояния рынка. С одной стороны, сейчас в России не достаёт разработчиков, и компании, чтобы заполучить хороших специалистов, увеличивают зарплаты. Но с другой — вы и сами всё знаете. Студии разработки ищут возможности сократить расходы клиентов на создание приложений и при этом сохранить качество услуг и кода на высоком уровне.

 6 способов сэкономить на разработке мобильного приложения

 Способ 1. Попробовать коробочное решение
 Продукты «из коробки», или конструкторы приложений, позволяют создавать типовые сервисы с ограниченной функциональностью. Они помогают проверить гипотезы по запуску мобильного продукта: нуждаются ли в нём пользователи и будет ли на него спрос.

 Минус конструкторов в том, что они неадаптивны. Если вы увидите, что пользователи заинтересовались сервисом, у вас не будет возможности масштабировать и развивать проект. Чтобы сохранить аудиторию, лучше закрыть «коробку» и разработать приложение с нуля.

 Ещё одна причина уйти от коробочного решения — это права. Они будут принадлежать не вам, ведь вы покупаете не сам продукт, а подписку на программу-конструктор.

 Способ 2. Разработать кроссплатформенное приложение
 Если вы хотите сделать более гибкий продукт, то можно попробовать разработку кроссплатформенного приложения, например, технологию Flutter. Написанные на ней приложения работают и на iOS, и на Android.

 Один код на две платформы позволяет в моменте сделать приложение дешевле нативного. Но этот вариант больше подходит, если вы хотите протестировать пользовательское поведение в приложении — в перспективе поддержка и развитие таких проектов обходится дороже нативных.

 Способ 3. Начать с разработки MVP-версии
 Такой вариант подходит для любого бизнеса. Это и приемлемые вложения на первом этапе работ, и возможность получать прибыль уже после первых месяцев разработки, и гибкое масштабирование вашего продукта. Закажите разработку у нас, если хотите экономить на создании приложения с пользой для всего проекта.

 Способ 4. Отдать разработку приложения на аутсорс
 У аутсорсеров есть доступ к лучшим технологиям и наиболее современным методам разработки приложений. Компании, работающие на аутсорсе, обычно используют свою базу данных и несут ответственность за качество созданных продуктов. Это значительно повышает конкурентоспособность готового приложения на рынке.

 Внешняя компания обычно не требует постоянного содержания, оплаты отпусков и больничных, что значительно снижает затраты на содержание собственной команды. Кроме того, аутсорсинг позволяет использовать опыт и знания профессионалов — способствует оптимизации процесса разработки и приводит к повышению качества продукта.

 Способ 5. Разрабатывать приложение и бэкенд одной командой
 Иногда так бывает, что у клиента есть свои бэкендеры, которых он хочет привлечь на разработку приложения. Или клиент ищет фрилансеров, чтобы было дешевле. Но в такие моменты стоит помнить, что работа над приложением двумя командами раздувает стоимость проекта. Это происходит, потому что команды работают обособленно — если появятся проблемы, у специалистов не будет возможности решить их оперативно.

 Работа над проектом одной студией существенно сокращает время на коммуникацию между исполнителями и пересмотр кода. Эффективное взаимодействие мобильных разработчиков и бэкендеров уменьшает время разработки проекта и сокращает расходы на обслуживание и поддержку приложения в дальнейшем. Если у вас есть возможность передать всю работу мобильным разработчикам — лучше сделать так.

 Способ 6. Уменьшить количество кастомных элементов и увеличить использование готовых библиотек
 В мире разработки существуют уже готовые сниппеты или библиотеки, которые программисты могут использовать на проектах. Это позволяет сократить время разработки и уменьшить стоимость проекта в несколько раз.

 Например, если мы хотим добавить в приложение функцию отправки push-уведомлений, то можно написать код с нуля — это займет 20 часов. Либо мы можем воспользоваться готовой библиотекой, которая уже содержит необходимые сниппеты, тесты и документацию — её адаптация займёт 4 часа

 Конечно, невозможно сделать всё приложение из готовых решений, но иногда отказ от кастомной разработки в пользу библиотек поможет ужаться и сделает проект дешевле.

 Сколько времени уходит на разработку приложения

 Мы бы хотели сказать вам так: «Два месяца и всё будет готово!» Но на самом деле, разговор о сроках разработки мобильного приложения такой же долгий, как и разговор о его стоимости. Тут в прямом смысле нужен индивидуальный подход — оценка функциональности, диаграмма Ганта.

 Но, опираясь на свой опыт и опыт коллег по рынку, можем сориентировать вас, сколько времени обычно уходит на разработку приложения в зависимости от его функциональности. ',
        'ARTICLE', 5, 6, 'https://livetyping.com/assets/images/blog/stoimost-0.jpg'),

       (now(), true, null,
        'Космические колонии: как искусственный фотосинтез может стать ключом к устойчивой жизни за пределами Земли',
        'text',
        'Жизнь на Земле обязана своим существованием фотосинтезу — процессу, появившемуся 2,3 миллиарда лет назад. Эта чрезвычайно интересная (и до сих пор не до конца понятная) реакция позволяет растениям и другим организмам получать солнечный свет, воду и углекислый газ, преобразуя их в кислород и энергию в виде сахара.

 Фотосинтез — настолько неотъемлемая часть функционирования Земли, что мы воспринимаем его как нечто само собой разумеющееся. Но когда мы смотрим за пределы нашей планеты в поисках мест для исследования и заселения, становится очевидно, насколько редкий и ценный этот процесс.

 Как мы с коллегами выяснили в новой работе, опубликованной в журнале Nature Communications, последние достижения в создании искусственного фотосинтеза могут стать ключом к выживанию и процветанию вдали от Земли.

 Потребность человека в кислороде усложняет процесс космических путешествий. Требования к топливу ограничивает количество кислорода, которое мы можем взять с собой, особенно если мы хотим совершить дальние путешествия на Луну и Марс. Путешествие на Марс в один конец обычно занимает порядка двух лет, а это значит, что мы не можем отправить с Земли сколько угодно ресурсов.

 На Международной космической станции уже существуют способы производства кислорода путём переработки углекислого газа. Большая часть кислорода на МКС поступает в результате электролиза, в котором электричество от солнечных батарей станции используется для разделения воды на водород и кислород, который вдыхают астронавты. На станции также есть отдельная система, преобразующая углекислый газ, который астронавты выдыхают, в воду и метан.

 Но эти технологии ненадёжны, неэффективны, тяжелы и сложны в обслуживании. Например, процесс выработки кислорода требует около трети всей энергии, необходимой для работы всей системы «контроля окружающей среды и жизнеобеспечения» МКС.

 Пути развития

 Поэтому поиск альтернативных систем, которые можно было бы использовать на Луне и во время полётов на Марс, продолжается. Одна из возможностей — собирать солнечную энергию (которой в космосе предостаточно) и напрямую использовать её для производства кислорода и переработки углекислого газа в одном устройстве.

 Единственным ресурсом для такого устройства будет вода — аналогично процессу фотосинтеза, происходящему в природе. Это позволит обойти сложные установки, в которых два процесса — сбор света и химическое производство — разделены, как, например, на МКС.



 Такой подход может уменьшить вес и объём системы — два ключевых критерия для освоения космоса. Также он может оказаться более эффективным.

 Мы могли бы использовать дополнительную тепловую энергию, выделяющуюся в процессе улавливания солнечной энергии, непосредственно для катализа химических реакций — тем самым ускоряя их. Кроме того, можно было бы значительно сократить количество соединений и объём технического обслуживания.

 Мы создали теоретическую основу для анализа и прогнозирования работы таких интегрированных устройств «искусственного фотосинтеза» для применения на Луне и Марсе.

 Вместо хлорофилла, который отвечает за поглощение света в растениях и водорослях, в этих устройствах используются полупроводниковые материалы, которые могут быть покрыты простыми металлическими катализаторами, поддерживающими желаемую химическую реакцию.

 Наш анализ показывает, что эти устройства могли бы дополнить существующие технологии жизнеобеспечения, такие как генератор кислорода, используемый на МКС. Это особенно актуально в сочетании с устройствами, концентрирующими солнечную энергию для проведения реакций (по сути, это зеркала, фокусирующие поступающий солнечный свет).

 Существуют и другие подходы. Например, мы можем производить кислород непосредственно из лунного грунта (реголита). Но для этого необходимы высокие температуры.

 Устройства искусственного фотосинтеза, с другой стороны, могут работать при комнатной температуре при давлении, которое существует на Марсе и Луне. Это означает, что их можно будет использовать непосредственно в местах обитания, используя воду в качестве основного ресурса.

 Это особенно интересно, учитывая предполагаемое наличие водяного льда в лунном кратере Шеклтон, который является предполагаемым местом посадки в будущих лунных миссиях.

 На Марсе атмосфера почти на 96% состоит из углекислого газа — казалось бы, идеальный вариант для устройства искусственного фотосинтеза. Но интенсивность света на красной планете слабее, чем на Земле, из-за большего расстояния от Солнца. Может ли это стать проблемой? Мы рассчитали интенсивность солнечного света, доступного на Марсе. Мы показали, что там можно использовать подобные устройства, хотя солнечные зеркала становятся ещё более важными.

 Эффективное и надёжное производство кислорода и других химических веществ, а также утилизация углекислого газа на борту космических кораблей и в местах обитания — это огромная проблема, которую мы должны решить для долгосрочных космических миссий.

 Существующие системы электролиза, работающие при высоких температурах, требуют значительных затрат энергии. А устройства для преобразования углекислого газа в кислород на Марсе всё ещё находятся в зачаточном состоянии, независимо от того, основаны они на фотосинтезе или нет.

 Поэтому необходимо несколько лет интенсивных исследований, чтобы иметь возможность использовать эту технологию в космосе. Копирование основных элементов природного фотосинтеза может дать нам некоторые преимущества, которые помогут нам реализовать их в недалёком будущем.

 Использование в космосе и на Земле

 Отдача была бы огромной. Например, мы могли бы создавать искусственные атмосферы в космических аппаратах и производить химические вещества, необходимые нам в долгосрочных миссиях, такие как удобрения, полимеры или фармацевтические препараты.

 Кроме того, знания, которые мы получим при проектировании и изготовлении этих устройств, могут помочь нам решить проблему «зелёной» энергии на Земле.

 К счастью, у нас есть растения и водоросли для производства кислорода. Но устройства искусственного фотосинтеза могут быть использованы для производства водорода или топлива на основе углерода (вместо сахара), открывая «зелёный» путь для производства богатых энергией химических веществ, которые мы можем хранить и использовать в транспорте.

 Освоение космоса и наша будущая энергетическая экономика имеют очень похожую долгосрочную цель: устойчивость. Устройства искусственного фотосинтеза вполне могут стать ключевой частью её реализации.',
        'ARTICLE', 6, 1,
        'https://habrastorage.org/r/w1560/getpro/habr/post_images/cda/e7b/5ab/cdae7b5ab3068bb476324bb3ab698f8b.jpg'),

       (now(), true, null,
        'Как гугл узнаёт об утечке токена API?',
        null,
        'Недавно запушил публичный репозиторий, в котором содержались данные для авторизации в Google Cloud Platform (репозиторий тестовый, да и за свой free доступ я не очень боюсь). Как только репозиторий улетел на GitHub, мне сразу прилетело сообщение на почту, что данные скомпрометированы. Как они это поняли? Это какое-то сотрудничество с GitHub? По типу: если в чьём-то репозитории вы найдёте то и то, то делайте репорт в гугл...',
        'DISCUSSION', 3, 4, null),

       (now(), true, null,
        'Как лучше хранить методы выплат?',
        null,
        'Реализую массовые выплаты клиентам. Выплаты на банковские карты и электро кошельки. Связь один к одному (пользователь может иметь один метод для выплат). Думаю над схемой бд и есть варианты:

 1) Поле number в таблице payment_methods будет использоваться для хранения банковских карт и кошельков. Если нужны будут доп. поля (будет зависеть от поставщика услуг) - делать их null.
 2) Создать дополнительно таблицы bank_cards и wallets и связать с payment_methods.

 Или может другой способ? Подводных камней не знаю, с выплатами дело не имела.',
        'DISCUSSION', 11, 7, null),

       (now(), true, null,
        'Яндекс удаляет товары с формулировкой Малоценная или маловостребованная страница, как быть?',
        null,
        'Добрый день!
 Запустили сайт интернет-магазина, заметили, что яндекс всячески препятствует попаданию в поиск товаров.
 Сначала нам заблокировали фид по каким-то товарам, которых в фиде нет. Потом разблокировали, проверяют фид больше недели. При этом Озон по нашему бренду во всю рекламирует через яндекс товары контрафакт.
 Теперь столкнулись с такой проблемой, что яндекс все товары с ценами выгоднее, чем на маркетплейсах начинает удалять из поиска с формулировкой "Малоценная или маловостребованная страница".
 На наши вопросы в поддержку как всегда отписки невнятные.
 Кто сталкивался с такой ситуацией?
 Что посоветуете, как работать, сайт продвигать в яше, если такие дела..',
        'DISCUSSION', 10, 4, null),

       (now(), true, null,
        'Intel выложила в открытый доступ моноширинный шрифт One Mono для эмуляторов терминалов и редакторов кода',
        'Intel выложила в открытый доступ на GitHub свой моноширинный шрифт One Mono для использования в эмуляторах терминалов и редакторах кода. Шрифт позиционируется как многоязычный, включает 684 глифа и поддерживает более 200 языков на основе латиницы, но пока без кириллицы.',
        'Intel выложила в открытый доступ на GitHub свой моноширинный шрифт One Mono для использования в эмуляторах терминалов и редакторах кода. Шрифт позиционируется как многоязычный, включает 684 глифа и поддерживает более 200 языков на основе латиницы, но пока без кириллицы.

 Исходные компоненты шрифта распространяются под открытой лицензией OFL 1.1 (Open Font License), которая позволяет неограниченно модифицировать шрифт, использовать его в том числе для коммерческих целей, а также для печати, в интерфейсе приложений и на веб-сайтах.

 Intel опубликовала для загрузки файлы шрифта в форматах TrueType (TTF), OpenType (OTF), UFO (исходные файлы), WOFF и WOFF2. Они позволяют добавить этот шрифт в различные редакторы кода, включая VSCode и Sublime Text, а также использовать проект для веб-сайтов.

 Согласно пояснению OpenNET, шрифт Intel One Mono подготовлен при участии группы слабовидящих разработчиков и нацелен на предоставление наилучшей разборчивости символов и снижение усталости и перенапряжения глаз в процессе работы с кодом. Символы и глифы спроектированы для максимального акцентирования различий между похожими символами, такими как "l", "L" и "1", а также усиления отличия символов в верхнем и нижнем регистре (по сравнению с другими шрифтами высота заглавных и строчных букв отличается сильнее). В шрифте также увеличены используемые при программировании служебные символы, такие как косая черта, фигурные, квадратные и круглые скобки. В буквах более ярко выражены скруглённые области, такие как дуги в буквах "d" и "b".

 Разработчики пояснили, что наилучшая читаемость в шрифте Intel One Mono наблюдается при размерах от 9 пикселей при отображении на экране и 7 пикселей при выводе на печать. Доступно 4 варианта толщины символов (Light, Regular, Medium, и Bold) и поддержка наклонного начертания. В наборе обеспечена поддержка таких расширений OpenType, как контекстно применяемое приподнятое двоеточие, корректировка отображения символов в зависимости от выбранного языка, разные формы верхнего и нижнего индексов, альтернативные стили и отображение дробей.',
        'NEWS', 12, 13,
        'https://habrastorage.org/getpro/habr/upload_files/a20/9af/5d7/a209af5d7213ad4b08f71718635c7afb.png'),

       (now(), true, null,
        'Microsoft прекратит поддержку Cortana в Windows в конце этого года',
        'Microsoft откажется от поддержки голосового помощника Cortana в Windows до конца 2023 года. Его заменит ИИ-ассистент Windows Copilot.',
        'Microsoft откажется от поддержки голосового помощника Cortana в Windows до конца 2023 года. Его заменит ИИ-ассистент Windows Copilot.


 На странице поддержки компания пояснила, что «больше не будет поддерживать Cortana в Windows как отдельное приложение». Голосовой помощник будет по-прежнему доступен в Outlook Mobile, Microsoft Teams Mobile, Teams display и Teams room.

 Microsoft впервые представила Cortana в Windows 10 в 2015 году. С выпуском Windows 11 голосовой помощник перестал отображаться на панели задач и больше не появлялся при первой загрузке системы.

 Кроме того, Microsoft закрыла приложение Cortana для iOS и Android в 2020 году и прекратила поддержку Cortana в наушниках Surface и других устройствах. В 2021 году компания прекратила выпуск мобильной версии Cortana.

 Windows Copilot в Windows 11 будет напоминать ИИ-панели, которые уже доступны в браузере Edge, а также продуктах Office и на платформе GitHub. Он позволит пользователям взаимодействовать с ИИ-помощником в любом приложении или программе. Боковую панель с ним можно будет вызвать с панели задач и закрепить по левому или правому краю экрана.',
        'NEWS', 13, 4,
        'https://habrastorage.org/getpro/habr/upload_files/061/add/2c2/061add2c267287e7df57ab5926738381.jpg'),

       (now(), true, null,
        'Новая модель ИИ от Nvidia создаёт сложные 3D-сцены из 2D-видеороликов',
        'Nvidia представила модель искусственного интеллекта Neuralangelo, которая реконструирует 3D-сцены из 2D-видеоклипов. Она позволяет создавать реалистичные виртуальные копии зданий, скульптур и других объектов реального мира.',
        'Эти 3D-объекты затем можно импортировать в дизайнерские приложения, чтобы редактировать их для дальнейшего использования в разных сферах, например в искусстве, разработке видеоигр, робототехнике и при создании промышленных цифровых двойников.

 Neuralangelo обрабатывает текстуры сложных материалов, включая черепицу, оконные стёкла и гладкий мрамор.

 В демонстрации исследователи Nvidia показали, как модель может воссоздавать такие знаковые объекты, как скульптура Давида Микеланджело, а также обычные предметы вроде грузовика. Neuralangelo способна реконструировать интерьеры и экстерьеры зданий, как в примере с моделью парка в кампусе Nvidia Bay Area.
 Предыдущие модели искусственного интеллекта для реконструкции 3D-сцен стремились к тому, чтобы точно зафиксировать повторяющиеся узоры текстур, однородные цвета и сильные цветовые вариации. Neuralangelo же использует технологию, лежащую в основе Nvidia Instant NeRF, чтобы запечатлеть эти мельчайшие детали. Это технология под названием «Мгновенные примитивы нейронной графики» стала результатом реализации алгоритма рендеринга/обучения для конкретной задачи на мелкозернистом графическом процессоре, где возможности управления потоком намного быстрее, чем плотные тензоры. Кроме того, Nvidia разработала метод кодирования хэш-сетки с несколькими разрешениями, который не зависит от задачи и обеспечивает лучший компромисс между скоростью и качеством, чем ранее существовавшие.

 Используя 2D-видео объекта или сцены, снятой с разных ракурсов, Neuralangelo выбирает несколько кадров, чтобы получить ощущение глубины, размера и формы. После этого система создаёт грубое трёхмерное представление сцены, подобно скульптору, начинающему высекать форму объекта. Затем она оптимизирует визуализацию, чтобы сделать детали более чёткими.

 Подробности о Neuralangelo Nvidia представит на конференции по компьютерному зрению и распознаванию образов (CVPR), которая пройдет с 18 по 22 июня в Ванкувере.

 В 2022 году NVIDIA разработала Instant NeRF — нейромодель рендеринга, которая изучает 3D-сцену с высоким разрешением за секунды и может отрисовать изображения этой сцены за несколько миллисекунд. Модель использует инверсный рендеринг с применением ИИ для определения поведения света в реальном мире, что позволяет исследователям реконструировать 3D-сцену из нескольких 2D-изображений, снятых под разными углами.',
        'NEWS', 8, 4,
        'https://habrastorage.org/getpro/habr/upload_files/c3b/4e6/c15/c3b4e6c1539028755d5eed1c69be022f.JPG'),

       (now(), true, null,
        'Какие же красивые корпуса у старых деллов. Очень нравятся, хочу потом себе забрать такой.',
        null,
        null,
        'POST', 4, 8,
        'https://habrastorage.org/r/w1560/getpro/habr/upload_files/328/486/43e/32848643e8caf003759c9eb8fbd61901.png'),

       (now(), true, null,
        'А вы когда нибудь видели такой картридж для денди? Следы флюса тут именно с завода...',
        'text',
        'title',
        'POST', 2, 8,
        'https://habrastorage.org/r/w1560/getpro/habr/upload_files/5ea/023/a4d/5ea023a4d25e312370a5875103f3c4ec.png'),

       (now(), true, null,
        null,
        null,
        'Исследовал тут проблему завершения программы при завершении сессии винды в FMX.
 При таком сценарии происходит утечка памяти, т.к. Application не освобождается при завершении программы.
 Проблема это не большая и ни на что не влияет. Но, помимо этого тут затронут момент сохранения пользовательских данных при завершении программы.
 Как вы могли заметить, если программа убивается, например, Андроидом, когда он решил, что она давно не используется, то событий закрытия или уничтожения формы не происходит.

 Я нашёл интересное событие у формы, но в первую очередь, я увидел, что в FMX, в отличии от VCL, по умолчанию обрабатывается событие WM_ENDSESSION и WM_QUERYENDSESSION, которые мы обычно в VCL обрабатывали вручную у формы через message. Так вот, WM_QUERYENDSESSION по-умолчанию разрешает завершение программы, а вот WM_ENDSESSION, который происходит после этого события генерирует событие у формы под названием OnSaveState.

 Так что, я рекомендую все сохранения настроек или других данных пихать именно туда.',
        'POST', 1, 5,
        'https://habrastorage.org/r/w1560/getpro/habr/upload_files/008/0f1/173/0080f1173f8c5761058fd0b2042ff7b2.png');



insert into course (rdt, start_course, type, mentor_id)
values (null, now(), 'JAVA', 2),
       (null, now(), 'PYTHON', 2),
       (null, now(), 'UX_DESIGN', 2),
       (null, now(), 'JAVASCRIPT', 2),
       (null, now(), 'C', 2),
       (null, now(), 'TESTING', 2),
       (null, now(), 'PROJECT_MANAGEMENT', 2);

insert into chapter (name, rdt, course_id)
values ('Глава 1.Введение в Java', null, 1),
       ('Глава 2.Основы программирования на Java', null, 1),
       ('Глава 3.Классы. Объектно-ориентированное программирование', null, 1),
       ('Глава 4.Обработка исключений', null, 1),
       ('Глава 5.Коллекции', null, 1),

       ('Глава 1. Введение в Python', null, 2),
       ('Глава 2. Основы Python', null, 2),
       ('Глава 3. Объектно-ориентированное программирование', null, 2),
       ('Глава 4. Списки, кортежи и словари', null, 2),
       ('Глава 5. Модули', null, 2),

       ('Глава 1. Введение: Основы UI и UX', null, 3),
       ('Глава 2. Понимание задачи. Исследование', null, 3),
       ('Глава 3. Персоны и сценарии', null, 3),
       ('Глава 4. Основы человеческого восприятия', null, 3),
       ('Глава 5. Визуальный дизайн. Типографика, сетка, цвет.', null, 3),

       ('Глава 1. Введение в JavaScript', null, 4),
       ('Глава 2. Основы javascript', null, 4),
       ('Глава 3. Функциональное программирование', null, 4),
       ('Глава 4. Объектно-ориентированное программирование', null, 4),
       ('Глава 5. ООП. Классы', null, 4),

       ('Глава 1. Введение в C', null, 5),
       ('Глава 2. Основы языка Си', null, 5),
       ('Глава 3. Указатели', null, 5),
       ('Глава 4. Функции', null, 5),
       ('Глава 5. Препроцессор', null, 5),

       ('Глава 1. Введение в тестирование', null, 6),
       ('Глава 2. Отчеты о дефектах. Жизненный цикл “бага”', null, 6),
       ('Глава 3. Тестовая документация. Чек-листы, тест-кейсы и др.', null, 6),
       ('Глава 4. Техники тест-дизайна. Планирование, Оценка трудозатрат. ', null, 6),
       ('Глава 5. Тестирование UI и верстки.', null, 6),


       ('Глава 1. Введение в проектное управление', null, 7),
       ('Глава 2. Виды проектов и контрактов', null, 7),
       ('Глава 3. Роли в ІТ', null, 7),
       ('Глава 4. Инициация проекта, документация', null, 7),
       ('Глава 5. Стейкхолдеры', null, 7);



insert into material (theme, text)
values ('Язык программирования Java',
        'На сегодняшний момент язык Java является одним из самых распространенных и популярных языков программирования.' ||
        'Первая версия языка появилась еще в 1996 году в недрах компании Sun Microsystems, впоследствии поглощенной компанией Oracle.' ||
        ' Java задумывался как универсальный язык программирования, который можно применять для различного рода задач. ' ||
        'И к настоящему времени язык Java проделал большой путь, было издано множество различных версий. ' ||
        'Текущей версией является Java 20, которая вышла в марте 2023 года. А Java превратилась из просто универсального языка в целую платформу и экосистему,' ||
        ' которая объединяет различные технологии, используемые для целого ряда задач: от создания десктопных приложений до' ||
        ' написания крупных веб-порталов и сервисов. Кроме того, язык Java активно применяется для создания программного обеспечения для множества устройств:' ||
        ' обычных ПК, планшетов, смартфонов и мобильных телефонов и даже бытовой техники. Достаточно вспомнить популярность мобильной ОС' ||
        ' Android, большинство программ для которой пишутся именно на Java.'),
       ('Первая программа в IntelliJ IDEA',
        ' На данный момент одной из самых популярных сред разработки для Java является IntelliJ IDEA от компании JetBrains.' ||
        ' Рассмотрим, как использовать данную среду. Прежде всего загрузим установочный дистрибутив с официального сайта ' ||
        'https://www.jetbrains.com/idea/download. По этому адресу можно найти пакеты для Windows, MacOS, Linux. ' ||
        'Кроме того, сама среда доступна в двух версиях - Ultimate (платная с триальным бесплатным периодом) и Community (бесплатная).' ||
        ' В данном случае выберем бесплатную версию Community. После установки запустим IntelliJ IDEA и создадим первый проект. Для этого на стартовом экране выберем New Project:'),

       ('Язык программирования Python',
        'Python представляет популярный высокоуровневый язык программирования, который предназначен для создания приложений различных типов. Это и веб-приложения, и игры, и настольные программы, и работа с базами данных. Довольно большое распространение питон получил в области машинного обучения и исследований искусственного интеллекта.
       Впервые язык Python был анонсирован в 1991 году голландским разработчиком Гвидо Ван Россумом.' ||
        'С тех пор данный язык проделал большой путь развития. В 2000 году была издана версия 2.0, а в 2008 году - версия 3.0. ' ||
        'Несмотря на вроде такие большие промежутки между версиями постоянно выходят подверсии. Так, текущей' ||
        ' актуальной версией на момент написания данного материала является 3.11, которая вышла в октябре 2022 года.' ||
        'Основные особенности языка программирования Python:' ||
        'Скриптовый язык. Код программ определяется в виде скриптов.' ||
        'Поддержка самых различных парадигм программирования, в том числе объектно-ориентированной и функциональной парадигм.' ||
        'Интерпретация программ. Для работы со скриптами необходим интерпретатор, который запускает и выполняет скрипт.' ||
        'Выполнение программы на Python выглядит следующим образом. Сначала мы пишим в текстовом редакторе скрипт с набором выражений на данном языке программирования. Передаем этот скрипт на выполнение интерпретатору. Интерпретатор транслирует код в промежуточный байткод, а затем виртуальная машина переводит полученный байткод в набор инструкций, которые выполняются операционной системой.' ||
        'Здесь стоит отметить, что хотя формально трансляция интерпретатором исходного кода в байткод и перевод байткода виртуальной машиной в набор машинных команд представляют два разных процесса, но фактически они объединены в самом интерпретаторе.'),

       ('Установка и первая программа на Windows, MacOS, Linux',
        'Для создания программ на Python нам потребуется интерпретатор. Для его установки перейдем на страницу https://www.python.org/downloads/ и найдем ссылку на загрузку последней версии языка:' ||
        'По нажатию на кнопку будет загружен соответствующей текущей ОС установщик Python. Следует учитывать, что Windows 7 и более ранние версии не поддерживаются.' ||
        'а ОС Windows при запуске инсталлятора запускает окно мастера установки.' ||
        'Если текущая ОС - Mac OS, то по адресу https://www.python.org/downloads/ будет предложено загрузить графический установщик для MacOS. Загрузим, запустим его и выполним пошаговую установку' ||
        'Для создания программ на Python нам потребуется интерпретатор. Стоит отметить, что в некоторых дистрибутивах Linux (например, в Ubuntu) Python может быть установлен по умолчанию. Для проверки версии Python в терминале надо выполнить следующую команду
         python3 --version' ||
        'Если Python установлен, то она отобразит версию интерпретатора.' ||
        'Однако даже если Python установлен, его версия может быть не самой последней. Для установки последней доступной версии Python выполним следующую команду:' ||
        'sudo apt-get update && sudo apt-get install python3' ||
        'сли надо установить не последнюю доступную, а какую-то определенную версию, то указывается также подверсия Python. Например, установка версии Python 3.10:' ||
        'sudo apt-get install python3.10 cоответственно, установка версии Python 3.11:' ||
        'sudo apt-get install python3.11'),

       ('Основы Ux/Ui дизайна.',
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ornare lectus sit amet est placerat. Congue nisi vitae suscipit tellus mauris. Tempor commodo ullamcorper a lacus vestibulum sed arcu non odio. Dis parturient montes nascetur ridiculus. Varius vel pharetra vel turpis nunc eget lorem dolor sed. Dictum varius duis at consectetur lorem. Etiam tempor orci eu lobortis elementum nibh tellus. Pellentesque diam volutpat commodo sed egestas egestas fringilla. Duis ut diam quam nulla porttitor massa. Luctus accumsan tortor posuere ac. Imperdiet proin fermentum leo vel. Sit amet volutpat consequat mauris nunc congue nisi. Tellus in hac habitasse platea. Commodo elit at imperdiet dui accumsan sit. Magna eget est lorem ipsum dolor sit amet. Tristique senectus et netus et malesuada fames ac turpis. Volutpat blandit aliquam etiam erat velit scelerisque in. Dui ut ornare lectus sit amet est placerat in egestas. Facilisi nullam vehicula ipsum a arcu cursus vitae.'),
       ('Необычный дизайн.',
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ornare lectus sit amet est placerat. Congue nisi vitae suscipit tellus mauris. Tempor commodo ullamcorper a lacus vestibulum sed arcu non odio. Dis parturient montes nascetur ridiculus. Varius vel pharetra vel turpis nunc eget lorem dolor sed. Dictum varius duis at consectetur lorem. Etiam tempor orci eu lobortis elementum nibh tellus. Pellentesque diam volutpat commodo sed egestas egestas fringilla. Duis ut diam quam nulla porttitor massa. Luctus accumsan tortor posuere ac. Imperdiet proin fermentum leo vel. Sit amet volutpat consequat mauris nunc congue nisi. Tellus in hac habitasse platea. Commodo elit at imperdiet dui accumsan sit. Magna eget est lorem ipsum dolor sit amet. Tristique senectus et netus et malesuada fames ac turpis. Volutpat blandit aliquam etiam erat velit scelerisque in. Dui ut ornare lectus sit amet est placerat in egestas. Facilisi nullam vehicula ipsum a arcu cursus vitae.'),

       ('Что такое JavaScript',
        'JavaScript был создан в 1995 году в компании Netscape разработчиком Брендоном Айком (Brendon Eich) в качестве языка сценариев в браузере Netscape Navigator 2. Первоначально язык назывался LiveScript, но на волне популярности в тот момент другого языка Java LiveScript был переименован в JavaScript. Однако данный момент до сих пор иногда приводит к некоторой путанице: некоторые начинающие разработчики считают, что Java и JavaScript чуть ли не один и тот же язык. Нет, это абсолютно два разных языка, и они связаны только по названию.

   Первоначально JavaScript обладал довольно небольшими возможностями. Его цель состояла лишь в том, чтобы добавить немного поведения на веб-страницу. Например, обработать нажатие кнопок на веб-странице, произвести какие-нибудь другие действия, связанные прежде всего с элементами управления.

   Однако развитие веб-среды, появление HTML5 и технологии Node.js открыло перед JavaScript гораздо большие горизонты. Сейчас JavaScript продолжает использоваться для создания веб-сайтов, только теперь он предоставляет гораздо больше возможностей.

   Также он применяется как язык серверной стороны. То есть если раньше JavaScript применялся только на веб-странице, а на стороне сервера нам надо было использовать такие технологии, как PHP, ASP.NET, Ruby, Java, то сейчас благодаря Node.js мы можем обрабатывать все запросы к серверу также с помощью JavaScript.'),
       ('Первая программа на JavaScript',
        'Создадим первую программу на javascript. Для написания и тестирования программ на JavaScript нам потребуются две вещи: текстовый редактор и веб-браузер.
   В качестве текстового редактора можно взять любой, который нравится - Atom, Sublime Text, Visual Studio Code, Notepad++ и другие. В данном руководстве я буду ориентироваться на текстовый редактор Visual Studio Code, поскольку он является наиболее популярным.
   В качестве браузера также можно взять последние версии любого предпочтительного веб-браузера. В настоящем руководстве я буду преимущественно ориентироваться на Google Chrome.
   Для начала определим для нашего приложения какой-нибудь каталог. Например, создадим на диске C папку app. В этой папке создадим файл под названием index.html. То есть данный файл будет представлять веб-страницу с кодом HTML.' ||
        'Здесь мы определяем стандартные элементы html. В элементе head определяется кодировка utf-8 и заголовок (элемент title). В элементе body определяется тело веб-страницы, которое в данном случае состоит только из одного элемента <script>
   Подключение кода javascript на html-страницу осуществляется с помощью тега <script>. Данный тег следует размещать либо в заголовке (между тегами <head> и </head>), либо в теле веб-странице (между тегами <body> и </body>). Нередко подключение скриптов происходит перед закрывающим тегом </body> для оптимизации загрузки веб-страницы.'),


       ('Язык программирования C',
        'Язык программирования С (си) является одним из самых популярных и распространенных языков. Он представляет компилируемый язык программирования общего назначения со статической типизацией, разработанный в 1969—1973 годах в компании Bell Labs программистом Деннисом Ритчи (Dennis Ritchie).

Язык С нередко называют языком программирования "среднего уровня" или даже "низкого уровня", так как он сочетает элементы языков высокого уровня с функциональностью и производительностью ассемблера и работает близко к аппаратной части компьютера. В итоге мы можем манипулировать данными на низком уровне и при этом использовать высокоуровневые конструкции для управления работы программы.

Первоначально язык С предназначался для написания операционной системы Unix. Впоследствии Си стал одним из популярных языков, а его основной сферой применения стало системное программирование, в частности, создание операционных систем, драйверов, различных утилит, антивирусов и т.д. К слову сказать, Linux большей частью написан на Си. Однако только системным программированием применение данного языка не ограничивается. Данный язык можно использовать в программах любого уровня, где важны скорость работы и производительность. Так, мы можем писать с помощью Си и прикладные приложения, и даже веб-сайты (используя технологию CGI - Common Gateway Interface). Но, конечно, для создания графического интерфейса и веб-приложений, как правило, выбираются более подходящие инструменты и технологии, но тем не менее круг использования Си довольно широк. Это в немалой степени определило популярность языка. Например, в известном рейтинге языков программирования TIOBE язык С долгое время уверенно удерживает второе место.'),
       ('Компилятор GCC. Первая программа на Windows',
        'Установка компилятора
   Рассмотрим создание первой простейшей программы на языке Си с помощью компилятора GCC, который на сегодняшний день является одим из наиболее популярных компиляторов для Cи и который доступен для разных платформ. Более подобному информацию о GCC можно получить на официальном сайте проекта https://gcc.gnu.org/.
   Набор компиляторов GCC распространяется в различных версиях. Для Windows одной из наиболее популярных версий является пакет средств для разработки от некоммерческого проекта MSYS2. Следует отметить, что для MSYS2 требуется 64-битная версия Windows 7 и выше (то есть Vista, XP и более ранние версии не подходят)
   Итак, загрузим программу установки MSYS2 с официального сайта MSYS2: После загрузки запустим программу установки:На первом шаге установки будет предложено установить каталог для установки. По умолчанию это каталог C:\msys64:
   Оставим каталог установки по умолчанию (при желании можно изменить). На следующем шаге устанавливаются настройки для ярлыка для меню Пуск, и затем собственно будет произведена установка. После завершения установки нам отобразить финальное окно, в котором нажмем на кнопку Завершить'),


       ('Обеспечение качества и тестирование программного обеспечения - основные понятия и определения',
        'Качество программного обеспечения (Software Quality) - это степень, в которой программное обеспечение обладает требуемой комбинацией свойств.

Качество программного обеспечения (Software Quality) - это совокупность характеристик программного обеспечения, относящихся к его способности удовлетворять установленные и предполагаемые потребности.

Обеспечение качества (Quality Assurance - QA) - это совокупность мероприятий, охватывающих все технологические этапы разработки, выпуска и эксплуатации программного обеспечения (ПО) информационных систем, предпринимаемых на разных стадиях жизненного цикла ПО для обеспечения требуемого уровня качества выпускаемого продукта.

Контроль качества (Quality Control - QC) - это совокупность действий, проводимых над продуктом в процессе разработки для получения информации о его актуальном состоянии в разрезах: "готовность продукта к выпуску", "соответствие зафиксированным требованиям", "соответствие заявленному уровню качества продукта".

Тестирование программного обеспечения (Software Testing) - это одна из техник контроля качества, включающая в себя активности по планированию работ (Test Management), проектированию тестов (Test Design), вып'),
       ('Типы тестирования',
        'White/Black/Grey Box-тестирование
Для того, чтобы лучше понимать подходы к тестированию программного обеспечения, нужно, конечно же, знать, какие виды и типы тестирования в принципе бывают. Давайте начнем с рассмотрения основных типов тестирования, которые определяют высокоуровневую классификацию тестов.' ||
        'Black Box
Summary: Мы не знаем, как устроена тестируемая система.

Тестирование методом «черного ящика», также известное как тестирование, основанное на спецификации или тестирование поведения – техника тестирования, основанная на работе исключительно с внешними интерфейсами тестируемой системы.' ||
        'White Box
Summary: Нам известны все детали реализации тестируемой программы.

Тестирование методом белого ящика (также прозрачного, открытого, стеклянного ящика или же основанное на коде или структурное тестирование) – метод тестирования программного обеспечения, который предполагает, что внутренняя структура/устройство/реализация системы известны тестировщику. Мы выбираем входные значения, основываясь на знании кода, который будет их обрабатывать. Точно так же мы знаем, каким должен быть результат этой обработки. Знание всех особенностей тестируемой программы и ее реализации обязательны для этой техники. Тестирование белого ящика – углубление во внутреннее устройство системы за пределы ее внешних интерфейсов.' ||
        'Grey Box
Summary: Нам известны только некоторые особенности реализации тестируемой системы.

Тестирование методом серого ящика – метод тестирования программного обеспечения, который предполагает комбинацию White Box и Black Box подходов. То есть внутреннее устройство программы нам известно лишь частично. Предполагается, например, доступ ко внутренней структуре и алгоритмам работы ПО для написания максимально эффективных тест-кейсов, но само тестирование проводится с помощью техники черного ящика, то есть с позиции пользователя.

Эту технику тестирования также называют методом полупрозрачного ящика: что-то мы видим, а что-то – нет.'),


       ('Актуальность профессии IТ PM.',
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ornare lectus sit amet est placerat. Congue nisi vitae suscipit tellus mauris. Tempor commodo ullamcorper a lacus vestibulum sed arcu non odio. Dis parturient montes nascetur ridiculus. Varius vel pharetra vel turpis nunc eget lorem dolor sed. Dictum varius duis at consectetur lorem. Etiam tempor orci eu lobortis elementum nibh tellus. Pellentesque diam volutpat commodo sed egestas egestas fringilla. Duis ut diam quam nulla porttitor massa. Luctus accumsan tortor posuere ac. Imperdiet proin fermentum leo vel. Sit amet volutpat consequat mauris nunc congue nisi. Tellus in hac habitasse platea. Commodo elit at imperdiet dui accumsan sit. Magna eget est lorem ipsum dolor sit amet. Tristique senectus et netus et malesuada fames ac turpis. Volutpat blandit aliquam etiam erat velit scelerisque in. Dui ut ornare lectus sit amet est placerat in egestas. Facilisi nullam vehicula ipsum a arcu cursus vitae.'),
       ('Аутсорс. Продукт. Стартапы. Fix Price. Time & Material. Outstaffing. SLA',
        'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ornare lectus sit amet est placerat. Congue nisi vitae suscipit tellus mauris. Tempor commodo ullamcorper a lacus vestibulum sed arcu non odio. Dis parturient montes nascetur ridiculus. Varius vel pharetra vel turpis nunc eget lorem dolor sed. Dictum varius duis at consectetur lorem. Etiam tempor orci eu lobortis elementum nibh tellus. Pellentesque diam volutpat commodo sed egestas egestas fringilla. Duis ut diam quam nulla porttitor massa. Luctus accumsan tortor posuere ac. Imperdiet proin fermentum leo vel. Sit amet volutpat consequat mauris nunc congue nisi. Tellus in hac habitasse platea. Commodo elit at imperdiet dui accumsan sit. Magna eget est lorem ipsum dolor sit amet. Tristique senectus et netus et malesuada fames ac turpis. Volutpat blandit aliquam etiam erat velit scelerisque in. Dui ut ornare lectus sit amet est placerat in egestas. Facilisi nullam vehicula ipsum a arcu cursus vitae.');

insert into lectures (rdt, title, chapter_id, material_id)
values (null, 'Язык программирования Java', 1, 1),
       (null, 'Первая программа в IntelliJ IDEA', 2, 2),

       (null, 'Язык программирования Python', 6, 3),
       (null, 'Установка и первая программа на Windows, MacOS, Linux', 6, 4),

       (null, 'Основы Ux/Ui дизайна.', 11, 5),
       (null, 'Необычный дизайн.', 11, 6),

       (null, 'Что такое JavaScript', 16, 7),
       (null, 'Первая программа на JavaScript', 16, 8),

       (null, 'Язык программирования C', 21, 9),
       (null, 'Компилятор GCC. Первая программа на Windows', 21, 10),

       (null, 'Обеспечение качества и тестирование программного обеспечения - основные понятия и определения', 26, 11),
       (null, 'Типы тестирования', 26, 12),

       (null, 'Актуальность профессии IТ PM.', 31, 13),
       (null, 'Аутсорс. Продукт. Стартапы. Fix Price. Time & Material. Outstaffing. SLA', 31, 14);

insert into categories_publications(category_id, publications_id) values
    (1,3),
    (2,5),
    (3,6),
    (4,1),
    (5,4),
    (6,7),
    (7,4),
    (8,13),
    (9,4),
    (10,4),
    (11,8),
    (12,8),
    (13,5);

-- insert into chapter_exercises(chapter_id, exercises_id) VALUES
--                                                             ();
insert into chapter_lectures(chapter_id, lectures_id) values
    (1,1),
    (2,2),
    (6,3),
    (6,4),
    (11,5),
    (11,6),
    (16,7),
    (16,8),
    (21,9),
    (21,10),
    (26,11),
    (26,12),
    (31,13),
    (31,14);

--
-- insert into course_chapters(course_id, chapters_id) VALUES
--     (1,1),
--     (1,2),
--     (1,3),
--     (1,4),
--     (1,5),
--     (2,6),
--     (2,7),
--     (2,8),
--     (2,9),
--     (2,10),
--     (3,11),
--     (3,12),
--     (3,13),
--     (3,14),
--     (3,15),
--     (4,16),
--     (4,17),
--     (4,18),
--     (4,19),
--     (4,20),
--     (5,21),
--     (5,22),
--     (5,23),
--     (5,24),
--     (5,25),
--     (6,26),
--     (6,27),
--     (6,28),
--     (6,29),
--     (6,30),
--     (7,31),
--     (7,32),
--     (7,33),
--     (7,34),
--     (7,35);

insert into course_students(course_id, students_id) VALUES
    (1,3),
    (1,4),
    (1,5),
    (1,6),
    (1,7),
    (1,8),
    (1,9),
    (1,10),
    (1,11),
    (1,12);


insert into publication_tags(publication_id, tag_id) VALUES
(1, 9),
(1, 12),
(2, 8),
(2, 13),
(2, 14),
(3, 1),
(3, 14),
(4, 17),
(4, 1),
(5, 17),
(5, 18),
(5, 19),
(6, 9),
(6, 20),
(7, 1),
(7, 6),
(8, 1),
(8, 9),
(9, 19),
(10, 6),
(10, 8),
(11, 1),
(11, 11),
(12, 6),
(13, 9),
(13, 17);

insert  into users_publications(user_id, publications_id) VALUES
(1, 13),
(2, 2),
(2, 12),
(3, 5),
(4, 11),
(5, 3),
(6, 4),
(8, 10),
(9, 1),
(10, 7),
(11, 6),
(12, 8),
(13, 9);


-- insert  into tag_publications(tag_id, publications_id) VALUES
-- (),

